---
title: "Biodiversity analysis"
subtitle: "East Gippsland (extended area)" 
format:
  html:
    embed-resources: true
    toc: true
    toc-depth: 2
editor: source
execute:
  echo: false
  message: false
  warning: false
---

```{r library}
# Library
lib <- c("targets","tarchetypes",
         "tidyverse","sf","galah","terra",
         "tidyterra","tmap","leaflet","plotly")
invisible(lapply(lib, library, character.only = TRUE))
rm(lib)

# Targets config
tar_config_set(store = here::here("_targets"))

# Create a custom theme
theme_minimal_hpha0042 <- theme_minimal() +
  theme(
    # Plot title & subtitle
    plot.title = element_text(face = 'bold'),
    plot.title.position = "plot",
    plot.subtitle = element_text(color = "grey20", size = 12)
  )
theme_set(theme_minimal_hpha0042)
```

### Data Wragnling   

```{r}
# PREPARE DATA FOR VISUALISATION
fire1920_timeframe <- data.frame(
  start_date = as.POSIXct(c("2019-11-22", "2019-11-22")), 
  end_date = as.POSIXct(c("2020-03-01", "2020-03-01")))

# Define color palette
report_pal <- setNames(RColorBrewer::brewer.pal(n=8,name="Set2")[c(1,2)],
              c("parkres","fire"))
```

```{r}
tar_load(sighting) # ref to _targets.R

# 1. Create SpatRaster grid template with the same extent as the sighting data
grid_template <- terra::rast(
  x = sighting,           # Use the extent of the 'sighting' sf object
  crs = "epsg:7844",      # CRS = GDA2020 
  resolution = 1 / 3000   # Set the desired resolution (~1000m^2 per grid cell)
)

# 2. Assign unique IDs to the grid cells (cell numbers)
# The cell numbers will be used as grid cell IDs
grid_template <- terra::setValues(grid_template, 1:ncell(grid_template))

# 3. Convert sf points (sighting) to coordinates
# Convert sf POINT to terra SpatVector                                               
sighting_v <- terra::vect(sighting[c("sighting_id","sighting_geometry")])

# 4. Extract grid cell IDs for each sighting based on its coordinates
# Extract the cell number for each sighting point
sighting_gridcell <- terra::extract(
  grid_template, 
  sighting_v) |> 
  dplyr::rename(
    "sighting_rowname" = "ID", 
    "gridcell_id" = "lyr.1") |> 
  dplyr::mutate(
    sighting_rowname = as.character(sighting_rowname),
    gridcell_id = as.character(gridcell_id))

# 5. Combine the extracted cell IDs with the original sighting data
sighting <- base::cbind(sighting, sighting_gridcell["gridcell_id"])

# 6. Wrangling
sighting <- sighting |> 
  dplyr::filter(evc_group != "Plains Grasslands and Chenopod Shrublands") # n_burnt_after = 0

```


```{r}
head(sighting, 10)
```
### Data Summary     
```{r}
sighting |> 
  sf::st_drop_geometry() |> 
  group_by(sample) |> 
  summarise(
    "s.size" = n(), # number of individuals
    "observed" = length(unique(species)) # number of species
    ) 
```

### Standardising sampling periods  

Problem: Increased sighting effort after the fires. 

```{r}
# Line plot
ggplot(
  data = sighting |> 
  sf::st_drop_geometry() |> 
  dplyr::mutate(sighting_ym = format(sighting_date, "%Y-%m")) |>
  group_by(sighting_ym) |>
  summarise(sighting_count = n())
) +
  geom_line(
    aes(x = sighting_ym, y = sighting_count, group = 1),
    color = "grey30",
    linewidth = 1
  ) +
  # Line
  geom_point(aes(x = sighting_ym, y = sighting_count),
             size = 1.5) +
  theme(aspect.ratio = 1/5) + # Plot aspect ratio y/x
  # Highlight the fire period
  geom_rect(
    data = fire1920_timeframe |> dplyr::mutate(start_date = format(start_date, "%Y-%m"), end_date = format(end_date, "%Y-%m")),
    aes(xmin = start_date, xmax = end_date, ymin = -Inf, ymax = Inf),
    fill = report_pal[["fire"]],
    alpha = 0.2
  ) +
  # Annoation
  annotate(
    "text", x = format(fire1920_timeframe$start_date[1] %m-% months(2), "%Y-%m"), y = 22000,
    label = "Wildfires 2019/20",
    fontface = "bold",
    color = report_pal[["fire"]]) +
  labs(title = "Monthly number of sightings in the East Gippsland Shire",
       subtitle = "2017 - 2021",
       x = NULL, y = NULL)
```


Number of unburnt and burn grid cell per vegetation class  

```{r}
sighting |> 
  sf::st_drop_geometry() |> 
  group_by(evc_group, burnt) |> 
  summarise(gridcell_count = n()) |> 
  pivot_wider(names_from = burnt, values_from = gridcell_count) |> 
  dplyr::mutate(gridcell_diff = burnt - unburnt)
```


### Transformation   
```{r}
# TRANSFORM INTO iNEXT SUPPORTED INPUT FORMAT
sp1 <- sighting |> 
  sf::st_drop_geometry() |> 
  group_by(sample, species) |> 
  summarise(n = n()) |> 
  tidyr::pivot_wider(names_from = sample, values_from = n, values_fill = NULL)
sp1 |> head(10)

# Convert df into list of numeric vectors 
sp1_list <- lapply(as.list(sp1[,-1]), na.omit) 

# sp1_list[c("burnt_after","burnt_before","unburnt_after","unburnt_before")]

# Preview list of vectors 
lapply(sp1_list, function(x) head(x, 10))
```

### Statistical Estimation   
```{r}
# ESTIMATE BIODIVERSITY
sp1_output <- estimateD(sp1_list, datatype="abundance", base="size", level=NULL, conf=0.95)

# Results
sp1_output

```

```{r}
# FOREST PLOT 
sp1_output |> 
  ggplot(aes(x=Assemblage, y=qD, color = Assemblage)) + 
  geom_point() + 
  ggplot2::geom_errorbar(aes(ymin = qD.LCL, ymax = qD.UCL)
                         #, linewidth = ebsize, width = ebw
  ) +
  facet_wrap(~Order.q) + 
  theme(legend.position = "bottom")
```

