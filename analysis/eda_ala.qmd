---
title: "EDA ALA sighting"
subtitle: "East Gippsland (extended area)" 
format:
  html:
    embed-resources: true
    toc: true
    toc-depth: 2
editor: source
execute:
  echo: false
  message: false
  warning: false
---

```{r library}
# Library
lib <- c("targets","tarchetypes",
         "tidyverse","sf","galah","terra",
         "tidyterra","tmap","leaflet","plotly")
invisible(lapply(lib, library, character.only = TRUE))
rm(lib)

# Targets config
tar_config_set(store = here::here("_targets"))

# Create a custom theme
theme_minimal_hpha0042 <- theme_minimal() +
  theme(
    # Plot title & subtitle
    plot.title = element_text(face = 'bold'),
    plot.title.position = "plot",
    plot.subtitle = element_text(color = "grey20", size = 12)
  )
theme_set(theme_minimal_hpha0042)
```

```{r}
#| label: load-data 
tar_load(vic_map)
tar_load(evc_cropped)
tar_load(evc_cropped_v)
tar_load(poly_fire_1920)
tar_load(poly_filter_ala)
tar_load(ala_sighting)
tar_load(bbox_filter_ala)
e
tar_load(fire_history_eas)
```

### Data Wrangling

```{r}
ala_sighting |> sf::st_drop_geometry() |> select(speciesGroup) |> distinct() |> arrange()
```

```{r}
#| label: data-wrangling

# Data Wrangling 
ala_sighting <- ala_sighting |>
  # Add column
  dplyr::mutate(
    species_group = case_when(
    class == "Amphibia" ~ "Amphibians",
    speciesGroup == "Fungi" ~ "Fungi",
    .default = stringr::str_split_i(speciesGroup, " | ", -1)) 
  )
```

#### EVC Vegetation classes

There are 20 EVC vegetation classes `XGROUPNAME` in the study area.

```{r}
sort(unique(evc_cropped$XGROUPNAME))
```

### Data aggregation

#### Select species_groups

```{r}
# Define important Dates
fire1920_start_date <- lubridate::ymd("2019-11-21")
# fire1920_start_date %m+% months(18) [1] "2021-05-21"

# Crop fire extend 
poly <- sf::st_crop(st_make_valid(poly_fire_1920), st_make_valid(poly_filter_ala))

# Select species group ---------------------------------------------------------
# only those with ≥100 observations 
# [1] in burnt regions 
# [2] in the 18 months after fires were included for further analysis

ala_sighting_burnt <- 
  # [1] sighting in burnt regions
  sf::st_filter( 
    ala_sighting[c("species_group","eventDate","geometry")], 
    poly) 

selected_species_group <- ala_sighting_burnt |> 
  sf::st_drop_geometry() |> 
  # [2] in the 18 months after fires 
  filter(
    eventDate <= fire1920_start_date %m+% months(18)
  ) |>
  group_by(species_group) |>
  summarise(n = n()) |>
  filter(n >= 100) |>
  pull(species_group)

selected_species_group
```

Original data: 14 broad taxon groups `species_group`\
Selected species groups: only those with ≥100 observations \[1\] in burnt regions \[2\] in the 18 months after fires were included for further analysis

```{r}
ggplot() +
  geom_sf(data = vic_map,
          fill = "grey99", color = "grey70") +
  geom_sf(data = poly_fire_1920, fill = alpha("darkred",0.4)) + 
  geom_sf(data = poly_filter_ala, fill = "transparent", col = "orange", linewidth = 1)
```

```{r}
ggplot() +
  geom_sf(data = vic_map,
          fill = "grey99", color = "grey70") +
  geom_sf(
    data = ala_sighting |>
      filter(eventDate >= "2019-11-21" &
             eventDate <= ymd("2019-11-21") %m+% months(18)),
    aes(color = species_group),
    alpha = 0.5 , size = 1
  ) +
  # scale_color_manual(
    # values = pal,
    # name = "Species Group",
    # Legend
    # guide = guide_legend(nrow = 1, override.aes = list(size = 4, alpha = 1))
    # ) +
  # Zoom
  coord_sf(xlim = st_bbox(poly_filter_ala)[c("xmin", "xmax")], 
           ylim = st_bbox(poly_filter_ala)[c("ymin", "ymax")]) +
  labs(subtitle = "Jan 2017 - Jul 2023")
```

```{r}
#| fig-caption: "Which sighting records are in the burnt regions?"
ggplot() +
  geom_sf(
    data = vic_map, fill = "grey99", color = "grey70") +
  geom_sf(
    data = ala_sighting_burnt,
    alpha = 0.5 , size = 1
    ) +
  geom_sf(data = poly_fire_1920, fill = alpha("darkred",0.4)) +
  # Zoom
  coord_sf(xlim = st_bbox(poly_filter_ala)[c("xmin", "xmax")], 
           ylim = st_bbox(poly_filter_ala)[c("ymin", "ymax")]) +
  labs(subtitle = "Jan 2017 - Jul 2023")
```

```{r ARCHIVED}
#| eval: false
# Create grid cell using sf ---------------------------------------------------

## Grid sf object
grid <- st_make_grid(
    bbox_filter_ala, 
    cellsize = c(0.025, 0.025), # degree
    cellsize = units::as_units(25, "m"), # 25 x 25 m
    crs = st_crs(vic_map),
    what = "polygons",
    square = TRUE
    )
grid <- st_sf(grid_id = 1:length(lengths(grid)), grid) # Add grid ID

plot(st_bbox(grid |> filter(grid_id == 1)))

# No of grid: (0.25 x 0.25 degree) 12432
g1 <- sf::st_make_grid(
  bbox_filter_ala,
  cellsize = units::as_units(100, "km")) # length unit
# ------------------------------------------------------------------------------
```

#### Rasterise EVC to each grid cell

```{r}
# Create a SpatRaster grid template from scatch 
grid_template <- 
    terra::rast(
      xmin = bbox_filter_ala[["xmin"]],
      xmax = bbox_filter_ala[["xmax"]],
      ymin = bbox_filter_ala[["ymin"]],
      ymax = bbox_filter_ala[["ymax"]],
      crs = "epsg:7844", # GDA2020
      resolution = 1 / 3000
    )
terra::cellSize(grid_template, unit = "m")

# Number of cells 
# length(terra::cells(grid)) # 69027904
# Values of cells 
# terra::values(grid)

# Number of SIGHTINGS in each grid
countgrid <- terra::rasterize(
  vect(ala_sighting), 
  grid_template, 
  fun = "count", 
  background = NA)

# plot(countgrid)

# Plot
ggplot() +
  geom_sf(
    data = vic_map, fill = "grey99", color = "grey70") +
  tidyterra::geom_spatraster(
    data = countgrid |> filter(!is.na(count)),
    aes(fill = count)
    ) +
  scale_fill_viridis_c(na.value = "transparent") +
  # Zoom
  coord_sf(xlim = st_bbox(poly_filter_ala)[c("xmin", "xmax")], 
           ylim = st_bbox(poly_filter_ala)[c("ymin", "ymax")]) +
  labs(subtitle = "Count of sightings in each 1000 m^2 grid cell")
```

```{r}
# convert sf sighting points to terra::SpatVector
# v <- terra::vect(ala_sighting[c("recordID","geometry")])

# gridcell <- terra::extract(grid, # SpatRaster grid cell template
#                            v  # SpatVector sighting points
#                            )
```

```{r}
# rasterize EVC polygons XGROUPNAME to each grid cells
gridcell <- terra::rasterize(
  evc_cropped_v, # SpatVector object
  grid_template, # SpatRaster grid cell template
  field = "XGROUPNAME", # EVC class
  )

# Preview gridcell SpatRaster value
head(gridcell)

# Plot
ggplot() +
  geom_spatraster(data = gridcell) +
  scale_fill_viridis_d(na.value = "transparent") +  # Optional color scale
  labs(subtitle = "Vegetation class 'XGROUPNAME' of each grid cell",
       fill = "EVC Name") + 
  theme_minimal() +
  theme(legend.position = "none")
```

```{r}
# Count how many grid cells each EVC class covers? 
gridcell |> as.data.frame() |>
  dplyr::group_by(XGROUPNAME) |> 
  dplyr::summarise(n = n())
```

#### Sighting 

```{r}
selected_species_group <-  c("Amphibians", "Arthropods", "Birds", "Crustaceans", "Fishes", "Fungi", "Insects", "Mammals", "Molluscs", "Plants", "Reptiles")

Sys.time()
sighting <- ala_sighting |>
  # Subset necessary columns
  dplyr::select(recordID, species_group, eventDate, geometry) |> 
  # Subset records
  dplyr::filter(species_group %in% selected_species_group) |>
  dplyr::mutate(eventDate = lubridate::as_date(eventDate, tz = "UTC")) |> 
  # Join sighting POINTS with fire POLYGON
  sf::st_join(fire_history_eas,
          join = st_within, left = TRUE) |> 
  # Get the latest fire record of each sighting
  dplyr::filter(is.na(FIRE_START_DATE) | FIRE_START_DATE <= eventDate) |>
  dplyr::group_by(recordID) |> 
  dplyr::filter(is.na(FIRE_START_DATE) | FIRE_START_DATE == max(FIRE_START_DATE)) |> 
  ungroup() |> 
  # Add columns ---------
  dplyr::mutate(
    before_after_fire = case_when(
      eventDate < fire1920_start_date ~ "before",
      eventDate >= fire1920_start_date ~ "after" ),
    burnt = if_else(!is.na(FIRE_START_DATE) & ymd(FIRE_START_DATE) < eventDate, 
      "burnt", 
      "unburnt"),
    sample = paste(burnt, before_after_fire, sep = "_"),
    time_since_fire_days = if_else(burnt == "burnt",
      as.numeric(lubridate::ymd(eventDate) - lubridate::ymd(FIRE_START_DATE)),
      NA)
  )
  # ---------------------
Sys.time()
  # Old code ----
  # arrange(recordID, desc(FIRE_START_DATE), desc(FIRE_NO)) |> 
  # group_by(recordID) |>
  # dplyr::slice_head(n=1)
  # ---------------------

# CHECKING: nrow(sighting) < nrow(ala_sighting) <- excluded FIRE_START_DATE > eventDate, only selected_species_group


sighting_100 <- head(sighting,1000) |> 
  

# sighting_100 |> 
#   select(recordID, eventDate, FIRE_START_DATE,before_after_fire, burnt, sample, time_since_fire) |> 
#   filter(burnt == "unburnt") |>
#   # filter(!is.na(FIRE_START_DATE)) |>
#   head(100)
```

#### Fire
```{r}

# colnames(fire_history_eas)
# > [1] "FIRE_SEASON","FIRE_NO","FIRE_START_DATE","FIRE_SVRTY","geometry" 
# nrow(fire_history_eas) 
# > [1] 537303 records
```

